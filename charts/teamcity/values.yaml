# Override the name of the chart (used in naming resources)
nameOverride: ""

# Override the full name (default is the chart name + release name)
fullnameOverride: ""

# TeamCity Server configuration
server:
  # Number of server replicas/pods to run (should typically be 1)
  replicaCount: 1

  # TeamCity Server containers configuration
  containers:
    # TeamCity server container configuration
    server:
      image:
        # Docker image repository for TeamCity Server
        repository: jetbrains/teamcity-server
        # Image tag to use (leave empty to use default from Chart or latest)
        tag: ""
        # Image pull policy (e.g., Always, IfNotPresent, Never)
        pullPolicy: IfNotPresent

      # Environment variables for TeamCity server container
      env:
        - name: TEAMCITY_HTTPS_PROXY_ENABLED
          value: "true"

      resources:
        requests:
          # Minimum amount of memory requested for the server container
          memory: 4Gi

      # Additional volume mounts for TeamCity server container
      # Example:
      # volumeMounts:
      #   - name: teamcity
      #     mountPath: /data/teamcity_server/datadir
      #     subPath: server/data
      #   - name: teamcity
      #     mountPath: /opt/teamcity/logs
      #     subPath: server/logs
      volumeMounts: null

      # Default port for the TeamCity Server HTTP service (web UI and API)
      port: 8111

    # TeamCity database container configuration
    database:
      image:
        # Docker image repository for TeamCity database
        repository: postgres
        # Image tag to use (leave empty to use default from Chart or latest)
        tag: "14"
        # Image pull policy (e.g., Always, IfNotPresent, Never)
        pullPolicy: IfNotPresent

      # Environment variables for TeamCity database container
      env:
        - name: POSTGRES_DB
          value: teamcity
        - name: POSTGRES_USER
          value: teamcity
        - name: POSTGRES_PASSWORD
          value: teamcity

      resources:
        requests:
          # Minimum amount of memory requested for the TeamCity database container
          memory: 2Gi

      # Additional volume mounts for TeamCity database container
      # Example:
      # volumeMounts:
      #   - name: teamcity
      #     mountPath: /var/lib/postgresql/data
      #     subPath: postgresql/data
      volumeMounts: null

  # Hostname used for the TeamCity Server pod/container
  hostname: teamcity-server

  # Additional volumes to be mounted into the TeamCity Server pods
  # Example:
  # volumes:
  #   - name: teamcity
  #     persistentVolumeClaim:
  #       claimName: teamcity
  volumes: null

  # Configuration for the Kubernetes Service exposing TeamCity Server
  # If set to null, no Service resource will be created
  service:
    # Kubernetes service type (e.g., ClusterIP, NodePort, LoadBalancer)
    type: ClusterIP
    # List of ports to expose via the service
    ports:
      - name: http
        port: 8111
        targetPort: 8111
        protocol: TCP

  # Configuration for Ingress to expose TeamCity Server via HTTP/HTTPS
  # Note: Ingress only applies to the server component
  # If set to null, no Ingress resource will be created
  ingress:
    # Annotations to customize the behavior of the ingress controller.
    # Leave as null to disable.
    # Example:
    # annotations:
    #   nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    #   nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    #   nginx.ingress.kubernetes.io/configuration-snippet: |
    #     more_set_headers "X-Content-Type-Options: nosniff";
    annotations: null
    # Ingress class name (used to select the Ingress controller, e.g., nginx or traefik)
    className: nginx
    # TLS configuration for the ingress. Set to null to disable
    # Example:
    # tls:
    #   - hosts:
    #       - teamcity.example.com
    #     secretName: teamcity-tls
    tls: null
    # List of ingress rules. If null or empty, no ingress will be created
    # Example:
    # rules:
    #   - host: teamcity.example.com
    #     http:
    #       paths:
    #         - path: /
    #           pathType: Prefix
    #           backend:
    #             service:
    #               name: teamcity-server
    #               port:
    #                 number: 8111
    rules: null

# TeamCity Agent configuration
agent:
  # Ordinals configuration for the StatefulSet (starting ordinal index)
  ordinals:
    start: 1

  # Number of agent replicas/pods to run
  replicaCount: 3

  # TeamCity Agent containers configuration
  containers:
    # TeamCity Agent container configuration
    agent:
      image:
        # Docker image repository for TeamCity Agent
        repository: jetbrains/teamcity-agent
        # Image tag to use (leave empty to use default from Chart or latest)
        tag: ""
        # Image pull policy (e.g., Always, IfNotPresent, Never)
        pullPolicy: Always

      # Environment variables for TeamCity agent container
      env:
        - name: SERVER_URL
          value: "http://teamcity-server:8111"

      resources:
        requests:
          # Minimum amount of memory requested for each agent container
          memory: 2Gi

      securityContext:
        # User ID to run the agent container process as (set to 0 for root)
        runAsUser: 0

      # Additional volume mounts for TeamCity agent containers
      volumeMounts:
        - name: teamcity-agent
          mountPath: /data/teamcity_agent/conf

  # Hostname used for the TeamCity agent pod/container
  hostname: teamcity-agent

  # Additional volumes to be mounted into the TeamCity Agent pods
  # Example:
  # volumes:
  #   - name: urandom
  #     path: /dev/urandom
  volumes: null

  # Persistent volume claim templates for TeamCity Agent pods
  volumeClaimTemplates:
    - metadata:
        # Name of the persistent volume claim for the agent
        name: teamcity-agent
      spec:
        # Defines how the volume can be accessed by pods (e.g., ReadWriteOnce)
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            # Storage size requested for each agent's persistent volume
            storage: 1Gi
        # Storage class to use for agent volumes
        storageClassName: standard
