apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "teamcity.server.fullname" . }}
  labels:
    {{- include "teamcity.server.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.server.replicaCount }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "teamcity.server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "teamcity.server.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: server
          image: "{{ .Values.server.containers.server.image.repository }}:{{ .Values.server.containers.server.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.server.containers.server.image.pullPolicy }}
          {{- if .Values.server.service }}
          ports:
            {{- range .Values.server.service.ports }}
            - containerPort: {{ .targetPort }}
              name: {{ .name }}
              protocol: {{ .protocol }}
            {{- end }}
          {{- end }}
{{- if .Values.server.containers.server.env }}
          env:
{{ toYaml .Values.server.containers.server.env | indent 12 }}
{{- end }}
          startupProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 15
            successThreshold: 1
            tcpSocket:
              port: {{ .Values.server.containers.server.port }}
            timeoutSeconds: 2
          readinessProbe:
            tcpSocket:
              port: {{ .Values.server.containers.server.port }}
            initialDelaySeconds: 10
            periodSeconds: 15
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            tcpSocket:
              port: {{ .Values.server.containers.server.port }}
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
          resources:
{{ toYaml .Values.server.containers.server.resources | indent 12 }}
{{- if .Values.server.containers.server.volumeMounts }}
          volumeMounts:
{{ toYaml .Values.server.containers.server.volumeMounts | indent 12 }}
{{- end }}
        - name: database
          image: "{{ .Values.server.containers.database.image.repository }}:{{ .Values.server.containers.database.image.tag }}"
          imagePullPolicy: {{ .Values.server.containers.database.image.pullPolicy }}
{{- if .Values.server.containers.database.env }}
          env:
{{ toYaml .Values.server.containers.database.env | indent 12 }}
{{- end }}
          readinessProbe:
            exec:
              command:
                - pg_isready
                - '-d'
                - $POSTGRES_DB
                - '-U'
                - $POSTGRES_USER
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            exec:
              command:
                - pg_isready
                - '-d'
                - $POSTGRES_DB
                - '-U'
                - $POSTGRES_USER
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 2
          resources:
{{ toYaml .Values.server.containers.database.resources | indent 12 }}
{{- if .Values.server.containers.database.volumeMounts }}
          volumeMounts:
{{ toYaml .Values.server.containers.database.volumeMounts | indent 12 }}
{{- end }}
      restartPolicy: Always
{{- if .Values.server.volumes }}
      volumes:
{{ toYaml .Values.server.volumes | indent 8 }}
{{- end }}
